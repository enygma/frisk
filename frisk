#!/usr/bin/php
<?php
/**
* Function Testing Framework - PoC
*
* GOAL: Create a basic structure that can be used to send requests to a site and
* verify things like respose code and page contents.
* 
* FILES:
* > runner - this file, executes the tests defined by config file
* > config.ini - optional config file (defaults defined in config class
* > lib/ - contains application libraries
* > tests/ - default directory for tests, can be overriden in config 
*
* Autoloader points to the lib/asserts directory for handling assertion calls 
*/

// Before we do anything, be sure the extension is loaded
if(!extension_loaded('http')){
	die("Needed extension not loaded! (pecl_http)\n\n");
}

function __autoload($class){  include_once $class.'.php'; }

set_include_path(get_include_path().
	PATH_SEPARATOR.__DIR__.'/lib'.
	PATH_SEPARATOR.__DIR__.'/lib/Action'.
	PATH_SEPARATOR.__DIR__.'/lib/Assert'.
	PATH_SEPARATOR.__DIR__.'/lib/Helper'.
	PATH_SEPARATOR.__DIR__.'/lib/Filter'.
	PATH_SEPARATOR.__DIR__.'/lib/Exceptions'.
	PATH_SEPARATOR.__DIR__.'/tests');

HelperArguments::execute($_SERVER['argv']);

// See if they just need help
if(HelperArguments::getArgument('help')){
	HelperArguments::displayArgumentHelp();
	die();
}

$runner = new Runner();
try{
	HelperConfig::execute(null);
	
	if($suite=HelperArguments::getArgument('suite')){
		
		HelperSuite::execute($suite);
	}
	
	ob_start();
	$runner->execute();

	if($outputType=HelperArguments::getArgument('output')){
		// we have another output type, load our helper
		if(HelperOutput::allowedFormat($outputType)){ 
			echo HelperOutput::output($runner->testResults,$outputType);

		}else{ die("ERROR: Invalid output format (".$outputType.")!\n\n"); }
		
	}else{
		// just echo!
		echo "Start!\n\n";
		echo "=====================\n";
		echo 'ending status: '; print_r($runner->testResults);	
		echo "\n\n";
	}	

	$executionOutput=ob_get_clean();
	
	if(HelperArguments::getArgument('quiet')==null){
		echo $executionOutput;
	}
	if(HelperArguments::getArgument('outputFile')!==null){
		// write the output to a file
		$filePath = HelperArguments::getArgument('outputFile');
		HelperOutput::writeToFile($filePath,$executionOutput);
	}
}catch(Exception $e){
	echo 'ERROR: '.$e->getMessage()."\n\n";
}
?>
